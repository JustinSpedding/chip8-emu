use crate::state::State;
use std::fs;
use std::io::Read;
use std::path::Path;

pub static PROGRAM_START_ADDRESS: u16 = 0x200;
pub static FONT_SET_START_ADDRESS: usize = 0x50;

static FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

pub fn init_state(rom_path: &Path) -> State {
    let mut state = State {
        registers: [0; 16],
        memory: [0; 4096],
        stack: [0; 16],
        keypad: [false; 16],
        video: [0; 32],
        index: 0,
        pc: PROGRAM_START_ADDRESS,
        sp: 0,
        delay_timer: 0,
        sound_timer: 0,
    };
    state.memory[FONT_SET_START_ADDRESS..FONT_SET_START_ADDRESS + 80].clone_from_slice(&FONT_SET);
    load_rom(&mut state, rom_path);
    return state;
}

fn load_rom(state: &mut State, rom_path: &Path) {
    let mut f = fs::File::open(&rom_path).expect("no file found");
    f.read(&mut state.memory[PROGRAM_START_ADDRESS as usize..4096]).expect("rom too large");
}
